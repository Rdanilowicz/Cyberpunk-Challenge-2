using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using dotnet_cyberpunk_challenge_2.malware_daemons.lib;

namespace dotnet_cyberpunk_challenge_2.malware_daemons
{
    public class KuangGradeElevenMalware : KuangDaemonFamilyBase
    {
        public override async Task<string> GetIceTypeOnRemote()
        {
            ArasakaMessageResponse arasakaMessageResponse = await CurrentServerConnection.SendRequest("model-type");
            string modelType = arasakaMessageResponse.content["model"];
            // TODO: Challenge 3
            // We are requesting what kind of model is the ICE. The Kuang knows some memory addresses to look for that will tell
            // it what kind of ICE it is so we can use it's detection methods
            string matchedModel = "";
            if (_IsTargetHatichiICE(modelType))
            {
                matchedModel = "hitachi";
            }
            else if (_IsTargetHosakaICE(modelType))
                matchedModel = "hosaka";
            else if (_IsTargetKiroshiICE(modelType))
                matchedModel = "kiroshi";
            else
            {
                matchedModel = "unknown";
            }

            /*TODO: If the model type doesn't match any of the ones we know about then we need to return "unknown"
              *** Hint: Maybe we can use an "else" and use one of the protected functions in the parent class!
             */

            return modelType;
        }

        public override void IceBreak()
        {
            // NOT Building this right now,
            // We will build it later!
            throw new NotImplementedException();
        }

        public override async Task SetupIceBreakerTunnelToTarget();
        {
            string CurrentIceBreakerTunnelConnection = new IceBreakerTunnelConnection();
            CurrentIceBreakerTunnelConnection.Initialize();
        }
    }
}